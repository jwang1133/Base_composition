###The script is to clean the original data downloaded from the panzea website but have been converted from B73 RefV2 to RefV4
###This is the correct version of the script#######
###1, remove any non homologous snps polymorphisms.
###2, appply threshold for the MAF and the missing rate to control the output.

use Bio::DB::Fasta;
use strict;

####################Specifying the parameters##############
my $group = 'Maize';
my $maf_r = 0.05;
my $missing_r = 0.2;  
my $group_num = 100;




my $group_info = $group.$group_num;
my $missing_rate = $missing_r*100;
my $maf = $maf_r*100;

####################Specifying the input and output directory##############
my $dir = '/XXX/';
my $ref_dir = $dir.$group_info.'/XXX/';
my $input_file_dir =  $dir.$group_info.'/XXX/';
my $output_file_dir =  $dir.$group_info.'/XXX/';
mkdir $output_file_dir unless -e $output_file_dir; 		
my ($ch_s, $ch_e) = ($ARGV[0], $ARGV[1]);


for (my $ch = $ch_s; $ch <= $ch_e; $ch ++) {
	my $input_file = $input_file_dir.'maizeHapMapV2_B73RefGenV2_201203028_chr'.$ch.'_v4_sorted.hmp.txt';
	next unless -e $input_file;
	my $output_file = $output_file_dir.$group_info.'_Chr'.$ch.'.hmp_maf'.$maf.'_miss'.$missing_rate;
#	next if -e $output_file;
	my $ch_fas_file = $ref_dir.'Chr'.$ch.'.fa';
	my $ch_db =  Bio::DB::Fasta->new($ch_fas_file);

	open (OUT, '>'.$output_file) || die;	
 
 	open (F, $input_file) || die;
		while (<F>) {
			chomp;	
			my @t = split /\t/;	
			next if /#/;
			my $alt_ref_allele = $t[1];
			next if $alt_ref_allele =~ /\+/;
			my @allele_info = @t[0..8];
			my @strain_allele;
			for ( my $index =11;  $index <=$#t; $index=$index+1){
				my $i = $index;
				#####remove four accessions that have fewer number of snps
				next if $i == 62;
				next if $i == 85;
				next if $i == 87;
				next if $i == 89;
		 		#################################
				my $genotype = $t[$index];
				my $gg;
				if ($genotype =~ /[ACGTN]/){
					$gg = $genotype;					
				}
				else {$gg = 'N';}
				push @strain_allele, $gg;
			}
			my $total=0;  
			my %hash;
			foreach my $a (@strain_allele) {
				next if $a =~ /N/;
				$total ++;
				$hash{$a} ++;
			}
			my $missing_rate1 = sprintf "%.2f", ($group_num - $total)/$group_num;
			my @sorted_allele	= sort { $hash{$a} <=> $hash{$b} } keys %hash;
			my $maf1 = sprintf "%.2f", $hash{$sorted_allele[0]} / $total;
			next unless ($#sorted_allele == 1 && $maf1 >= $maf_r && $missing_rate1 <= $missing_r );
			my $major_allele = $sorted_allele[1]; #in here ref_allele is no the allele of reference genome but the major allele
			my $minor_allele = $sorted_allele[0]; #in here $alt_allele is minor allele.
			my $ref_allele = $ch_db->seq($ch, $t[3], $t[3]);
			next unless $ref_allele =~ /[ACGT]/;
			next unless ($ref_allele eq $major_allele || $ref_allele eq $minor_allele);
			my $alt_allele = $ref_allele eq $major_allele ? $minor_allele : $major_allele;
			$allele_info[1] = join('/', $ref_allele,$alt_allele);			
			print OUT $_."\t" foreach (@allele_info);
			print OUT $missing_rate1."\t".$maf1;
			print OUT "\t".$_ foreach (@strain_allele);	
			print OUT "\n";	
			} 	
	}
